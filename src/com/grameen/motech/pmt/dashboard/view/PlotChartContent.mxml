<?xml version="1.0" encoding="utf-8"?>
<view:PodContentBase xmlns:mx="http://www.adobe.com/2006/mxml" autoLayout="true"
					 xmlns:view="com.grameen.motech.pmt.dashboard.view.*" verticalGap="0" verticalAlign="top"
					 width="100%" height="100%" xmlns:effects="qs.charts.effects.*" 
					 xmlns:renderers="qs.charts.renderers.*" xmlns:code="http://code.google.com/p/flexlib/">
	<mx:Script>
		<![CDATA[
			import mx.charts.HitData;
			import mx.charts.chartClasses.ChartBase;
			import mx.charts.chartClasses.Series;
			import mx.charts.events.ChartItemEvent;
			import mx.charts.series.LineSeries;
			import mx.collections.ArrayCollection;
			import mx.rpc.events.ResultEvent;
			
			// The original data provider used for drillUp.
			private var initialDataProvider:ArrayCollection;
			[Bindable]
			private var dataProvider:ArrayCollection;
			[Bindable]
			private var _selectedViewIndex:Number = 0;
			private var chart:ChartBase;
			private var series:Series;
			private var drillToIndex:Number;
			[Binable]
			private var v1Max:Number = 100;
			
			private var appliedFilter:String = "";
			
			override protected function onResultHttpService(e:ResultEvent):void
			{
				var a:Array = jsonToObjectArray(e.result);
				var ac:ArrayCollection = new ArrayCollection(a);
				initialDataProvider = ac;
				dataProvider = ac;
				
				// dynamically fix vertical axis on the right
				var biggest:Number = v1Max;
				for each (var thisOne:Object in ac) {
					if (biggest < thisOne[properties.@valueField])  biggest = thisOne[properties.@valueField];
					if (biggest < thisOne[properties.@valueField2]) biggest = thisOne[properties.@valueField2];
					if (biggest < thisOne[properties.@valueField4]) biggest = thisOne[properties.@valueField4];
				}
//				v1.maximum = biggest;
				columnChart.invalidateDisplayList();
				
			}
			
			public function drillDown(e:ChartItemEvent):void
			{
				chart.showDataTips = false;
				drillToIndex = e.hitData.chartItem.index
				drillDownEffect.drillFromIndex = drillToIndex;
				series.setStyle("showDataEffect", drillDownEffect);
				dataProvider = createDrillDownData(Object(e.hitData.chartItem.item)); 
				
				columnChart.removeEventListener(ChartItemEvent.ITEM_CLICK, drillDown);
				columnChart.addEventListener(MouseEvent.CLICK, drillUp);
			}
			
			public function drillUp(e:MouseEvent):void
			{
				chart.showDataTips = false;
				drillUpEffect.drillToIndex = drillToIndex;
				series.setStyle("showDataEffect", drillUpEffect);
				dataProvider = initialDataProvider; 
				
			}
			
			// Creates random drill down data.
			// Assumes initial data is months and breaks down months into 30 days.
			public function createDrillDownData(data:Object):ArrayCollection
			{
				var ac:ArrayCollection = new ArrayCollection();
				var total:Number = data[properties.@valueField];
				var len:Number = 30;
				var randomPercents:Array = new Array();
				var totalPercents:Number = 0;
				var value:Number;
				// Generate an Array of random numbers that will be used to create percentages of the totals in the next loop.
				for (var i:Number = 0; i < len; i ++)
				{
					value = Math.max(.1, Math.random());// Make sure the number is not zero.
					randomPercents.push(value);
					totalPercents += value;
				}
				
				for (i = 0; i < len; i ++)
				{
					var o:Object = new Object();
					value = (randomPercents[i] / totalPercents) * total;
					o[properties.@valueField] = Math.round(value * 10) / 10;
					o[properties.@categoryField] = i + 1;
					ac.addItem(o);
				}
				
				return ac;
			}
			
			private function columnChartDataTipFunction(o:HitData):String
			{
				var a:Array = properties.@dataTipUnitLabel.split("*");
				var s:String = o.item[properties.@dataTipLabelField] + "\n";
				s += a[0] + o.item[properties.@valueField] + a[1] + "\n";
				return s;
			}
			
			
			private function growthChartDataTipFunction(o:HitData):String
			{
				var a:Array = properties.@dataTipUnitLabel.split("*");
				var s:String = o.item[properties.@dataTipLabelField3] + "\n";
				s += a[0] + o.item[properties.@valueField3] + a[1] + "\n";
				return s;
			}
			

		]]>
	</mx:Script>
	
	<effects:DrillDownEffect id="drillDownEffect" duration="1500" effectEnd="chart.showDataTips=true" />
	<effects:DrillUpEffect id="drillUpEffect" duration="1500" effectEnd="chart.showDataTips=true"/>
	<mx:NumberFormatter id="numForm" useThousandsSeparator="false"/>
		
	<code:WindowShade id="indicatorsShade"  opened="false" label="Indicators" headerClass="mx.controls.Button" verticalAlign="top" width="80%">
		<mx:Form width="100%" autoLayout="true" fontSize="9" verticalGap="1" paddingBottom="1" paddingTop="1">
			<mx:Text htmlText="Indicator:   {properties.@indicatorText}" width="100%"/>
			<mx:Text htmlText="Numerator:   {properties.@numerator}" width="100%"/>
			<mx:Text htmlText="Denominator: {properties.@denominator}" width="100%"/>
		</mx:Form>	
	</code:WindowShade>

	<mx:VBox
			width="100%" height="100%">
			<mx:PlotChart
				id="columnChart"
				width="100%" height="100%"
				dataProvider="{dataProvider}"
				showDataTips="true">
				
						<mx:series>
							<mx:PlotSeries 
								id="plotSeries" displayName="{properties.@valueField}"
								yField="{properties.@categoryField}" xField="{properties.@valueField}">
							</mx:PlotSeries>
							<mx:PlotSeries 
								id="plotSeries2" 
								xField="{properties.@valueField2}" displayName="{properties.@valueField2}" yField="{properties.@categoryField}">
							</mx:PlotSeries>
							</mx:series>
			</mx:PlotChart>
			<mx:ControlBar width="100%" horizontalAlign="center">
				<mx:Legend dataProvider="{columnChart}" borderStyle="none" direction="horizontal"/>
			</mx:ControlBar>
		</mx:VBox>
</view:PodContentBase>
