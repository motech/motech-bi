<?xml version="1.0" encoding="utf-8"?>
<!--
 The main application file for the Dashboard demo app.
 Loads the layout XML and creates PodLayoutManagers.
-->
<mx:Application
	xmlns:mx="http://www.adobe.com/2006/mxml"
	horizontalAlign="left" name="dashboard"
	minWidth="600" minHeight="600"
	width="100%" height="100%"
	backgroundSize="100%" borderStyle="solid"
	backgroundColor="#ffffff"
	paddingLeft="45" paddingRight="45" paddingBottom="35" paddingTop="20" implements="flash.events.IEventDispatcher"
	applicationComplete="onApplicationComplete()" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:vo="com.grameen.motech.pmt.dashboard.vo.*">
	<mx:Style source="/assets/styles.css" />
	<mx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			import com.grameen.motech.pmt.dashboard.events.LayoutChangeEvent;
			import com.grameen.motech.pmt.dashboard.managers.PodLayoutManager;
			import com.grameen.motech.pmt.dashboard.managers.StateManager;
			import com.grameen.motech.pmt.dashboard.view.ChartContent;
			import com.grameen.motech.pmt.dashboard.view.FormContent;
			import com.grameen.motech.pmt.dashboard.view.ListContent;
			import com.grameen.motech.pmt.dashboard.view.OverlaidColumnChartContent;
			import com.grameen.motech.pmt.dashboard.view.PieChartContent;
			import com.grameen.motech.pmt.dashboard.view.PlotChartContent;
			import com.grameen.motech.pmt.dashboard.view.Pod;
			import com.grameen.motech.pmt.dashboard.view.PodContentBase;
			import com.grameen.motech.pmt.dashboard.view.StackedChartContent;
			
			import mx.containers.Canvas;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ItemClickEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			import mx.utils.StringUtil;
			
			// Array of PodLayoutManagers
			private var podLayoutManagers:Array = new Array();
			
			// Stores the xml data keyed off of a PodLayoutManager.
			private var podDataDictionary:Dictionary = new Dictionary();
			
			// Stores PodLayoutManagers keyed off of a Pod.
			// Used for podLayoutManager calls after pods have been created for the first time.
			// Also, used for look-ups when saving pod content ViewStack changes.
			private var podHash:Object = new Object();
			
			[Bindable]
			private var _appliedFilters:String;
			
			[Bindable]
			private var _regions:ArrayCollection;
			
			public function get appliedFilters():String
			{
				if (YearCombo && YearCombo.selectedLabel && RegionCombo && RegionCombo.selectedItem && DistrictCombo && DistrictCombo.selectedLabel)
					if (DistrictCombo.selectedLabel == "All" && RegionCombo.selectedLabel == "All")
						_appliedFilters = StringUtil.substitute(" - {0} - All Facilities", YearCombo.selectedLabel);
					else if (DistrictCombo.selectedLabel == "All")
						_appliedFilters = StringUtil.substitute(" - {0} - All Districts, {1}",YearCombo.selectedLabel, RegionCombo.selectedLabel);
					else if (RegionCombo.selectedLabel == "All")
						_appliedFilters = StringUtil.substitute(" - {0} - {1}",YearCombo.selectedLabel, DistrictCombo.selectedLabel);
					else
					_appliedFilters = StringUtil.substitute(" - {0} - {1}, {2}",YearCombo.selectedLabel, DistrictCombo.selectedLabel, RegionCombo.selectedLabel);
				return _appliedFilters;
			}

			public function set appliedFilters(value:String):void
			{
				_appliedFilters = value;
			}

			private function onApplicationComplete():void
			{
				// Load pods.xml, which contains the pod layout.
				var httpService:HTTPService = new HTTPService();
				httpService.url = "data/pods.xml";
				httpService.resultFormat = "e4x";
				httpService.addEventListener(FaultEvent.FAULT, onFaultHttpService);
				httpService.addEventListener(ResultEvent.RESULT, onResultHttpService);
				httpService.send();
				
				
//				var referenceService:HTTPService = new HTTPService();
////				referenceService.url = "http://www.motechghana.org/data/JSONServer.php?params[method]=location_info";
//				referenceService.url = "data/location.json";
//				referenceService.resultFormat = "object";
//
//				referenceService.addEventListener(FaultEvent.FAULT, onFaultReferenceService);
//				referenceService.addEventListener(ResultEvent.RESULT, onResultReferenceService);
//				referenceService.send();
			}
			
			private function onFaultHttpService(e:FaultEvent):void
			{
				Alert.show("Unable to load data/pods.xml.");
			}
			
			private function onFaultReferenceService(e:FaultEvent):void
			{
				Alert.show("Unable to load reference data for filters");
			}
			
			private function onResultReferenceService(e:ResultEvent):void
			{
				var a:Array = jsonToObjectArray(e.result);
				_regions = new ArrayCollection(a);
//				for each (
			}
			
			protected function jsonToObjectArray(json:Object):Array {
				var decoded:Object = JSON.decode(json as String);
				
				return decoded["Region"] as Array;
				
			}
			
			private function onResultHttpService(e:ResultEvent):void
			{
				var viewXMLList:XMLList = e.result.view;
				var len:Number = viewXMLList.length();
				var containerWindowManagerHash:Object = new Object();
				for (var i:Number = 0; i < len; i++) // Loop through the view nodes.
				{
					// Create a canvas for each view node.
					var canvas:Canvas = new Canvas();
					// PodLayoutManager handles resize and should prevent the need for
					// scroll bars so turn them off so they aren't visible during resizes.
					canvas.horizontalScrollPolicy = "off";
					canvas.verticalScrollPolicy = "off";
					canvas.label = viewXMLList[i].@label;
					canvas.percentWidth = 100;
					canvas.percentHeight = 100;
					viewStack.addChild(canvas);
					
					// Create a manager for each view.
					var manager:PodLayoutManager = new PodLayoutManager();
					manager.container = canvas;
					manager.id = viewXMLList[i].@id;
					manager.addEventListener(LayoutChangeEvent.UPDATE, StateManager.setPodLayout);
					// Store the pod xml data. Used when view is first made visible.
					podDataDictionary[manager] = viewXMLList[i].pod;
					podLayoutManagers.push(manager);
				}
				
				var index:Number = StateManager.getViewIndex();
				// Make sure the index is not out of range.
				// This can happen if a tab view was saved but then tabs were subsequently removed from the XML.
				index = Math.min(tabBar.numChildren - 1, index);
				onItemClickTabBar(new ItemClickEvent(ItemClickEvent.ITEM_CLICK, false, false, null, index));
				tabBar.selectedIndex = index;
			}
			
			private function onItemClickTabBar(e:ItemClickEvent):void
			{
				var index:Number = e.index;
				StateManager.setViewIndex(index); // Save the view index.
				
				viewStack.selectedIndex = index;
				
				// If data exists then add the pods. After the pods have been added the data is cleared.
				var podLayoutManager:PodLayoutManager = podLayoutManagers[index];
				if (podDataDictionary[podLayoutManager] != null)
					addPods(podLayoutManagers[index]);
			}
			
			// Adds the pods to a view.
			private function addPods(manager:PodLayoutManager):void
			{
				// Loop through the pod nodes for each view node.
				var podXMLList:XMLList = podDataDictionary[manager];
				var podLen:Number = podXMLList.length();
				var unsavedPodCount:Number = 0;
				for (var j:Number = 0; j < podLen; j++)
				{
					// Figure out which type of pod content to use.
					var podContent:PodContentBase = null;
					if (podXMLList[j].@type == "chart")
						podContent = new ChartContent();
					else if (podXMLList[j].@type == "form")
						podContent = new FormContent();
					else if (podXMLList[j].@type == "list")
						podContent = new ListContent();
					else if (podXMLList[j].@type == "pieChart")
						podContent = new PieChartContent();
					else if (podXMLList[j].@type == "stackChart")
						podContent = new StackedChartContent();
					else if (podXMLList[j].@type == "plotChart")
						podContent = new PlotChartContent();
					else if (podXMLList[j].@type == "overlaidChart")
						podContent = new OverlaidColumnChartContent();
					
					if (podContent != null)
					{
						var viewId:String = manager.id;
						var podId:String = podXMLList[j].@id;
						// Get the saved value for the pod content viewStack.
						if (StateManager.getPodViewIndex(viewId, podId) != -1)
							podXMLList[j].@selectedViewIndex = StateManager.getPodViewIndex(viewId, podId);
						
						podContent.properties = podXMLList[j];
						var pod:Pod = new Pod();
						pod.id = podId;
						pod.titleText = podXMLList[j].@title;
						pod.title = String(pod.titleText + appliedFilters);
						
						pod.addChild(podContent);
						var index:Number;
						
						if (StateManager.isPodMinimized(viewId, podId))
						{
							index = StateManager.getMinimizedPodIndex(viewId, podId);
							manager.addMinimizedItemAt(pod, index);
						}
						else
						{
							index = StateManager.getPodIndex(viewId, podId);
							
							// If the index hasn't been saved move the pod to the last position.
							if (index == -1)
							{
								index = podLen + unsavedPodCount;
								unsavedPodCount += 1;
							}
							
							manager.addItemAt(pod, index, StateManager.isPodMaximized(viewId, podId));
						}
						
						pod.addEventListener(IndexChangedEvent.CHANGE, onChangePodView);
						
						podHash[pod] = manager;
					}
				}
				
				// Delete the saved data.
				delete podDataDictionary[manager];
				
				// Listen for the last pod to complete so the layout from the ContainerWindowManager is done correctly. 
				pod.addEventListener(FlexEvent.UPDATE_COMPLETE, onCreationCompletePod);
			}
			
			// Pod has been created so update the respective PodLayoutManager.
			private function onCreationCompletePod(e:FlexEvent):void
			{
				e.currentTarget.removeEventListener(FlexEvent.UPDATE_COMPLETE, onCreationCompletePod);
				var manager:PodLayoutManager = PodLayoutManager(podHash[e.currentTarget]);
				manager.removeNullItems();
				manager.updateLayout(false);
			}
			
			// Saves the pod content ViewStack state.
			private function onChangePodView(e:IndexChangedEvent):void
			{
				var pod:Pod = Pod(e.currentTarget);
				var viewId:String = PodLayoutManager(podHash[pod]).id;
				StateManager.setPodViewIndex(viewId, pod.id, e.newIndex);
			}

		]]>
	</mx:Script>
	<mx:HBox id="logo" width="100%" height="55" verticalAlign="middle" paddingRight="15">
		<!--mx:Image  source="@Embed(source='/assets/logo_GFTC.png')" height="40"/-->
		<mx:Label selectable="false" text="MOTECH Performance Indicators" width="35%" fontSize="15"/>
		</mx:HBox>
	<mx:HBox horizontalAlign="right" width="100%">
			<mx:Label text="Year:" fontSize="13"/>
			<mx:ComboBox id="YearCombo" selectedIndex="0">
				<mx:ArrayCollection>
					<mx:String>2012</mx:String>
					<mx:String>2011</mx:String>
					<mx:String>2010</mx:String>
				</mx:ArrayCollection>
			</mx:ComboBox>
			<mx:Label text="Region:" fontSize="13"/>
			<mx:ComboBox id="RegionCombo" dataProvider="{locations}"/>
			<mx:Label text="District:" fontSize="13"/>
			<mx:ComboBox id="DistrictCombo" dataProvider="{RegionCombo.selectedItem.subLocation}"/>
			<mx:Button id="searchButton" label="Apply"/>
		
	</mx:HBox>
	<mx:TabBar
		id="tabBar"
		itemClick="onItemClickTabBar(event)"
		height="35" 
		dataProvider="viewStack" />
	<mx:ViewStack
		id="viewStack"
		paddingTop="5"
		width="100%" height="85%" />
	
	<mx:ArrayCollection id="locations">
		<vo:Location label="All" value="All">
			<vo:subLocation>
				<mx:ArrayCollection>
					<vo:Location label="All" value="All"/>
					<vo:Location label="Awutu Senya" value="Awutu Senya"/>
					<vo:Location label="Kassena-Nankana West" value="Kassena-Nankana West"/>
				</mx:ArrayCollection>
			</vo:subLocation>
		</vo:Location>
		<vo:Location label="Central Region" value="Central Region">
			<vo:subLocation>
				<mx:ArrayCollection>
					<vo:Location label="All" value="All"/>
					<vo:Location label="Awutu Senya" value="Awutu Senya"/>
				</mx:ArrayCollection>
			</vo:subLocation>
		</vo:Location>
		<vo:Location label="Upper East" value="Upper East">
			<vo:subLocation>
				<mx:ArrayCollection>
					<vo:Location label="All" value="All"/>
					<vo:Location label="Kassena-Nankana West" value="Kassena-Nankana West"/>
				</mx:ArrayCollection>
			</vo:subLocation>
		</vo:Location>
	</mx:ArrayCollection>
	
</mx:Application>
